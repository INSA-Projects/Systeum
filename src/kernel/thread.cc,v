head     1.1;
branch   1.1.1;
access   ;
symbols  v0:1.1.1.1 Base:1.1.1;
locks    ; strict;
comment  @// @;


1.1
date     2005.10.17.18.33.29;  author pgarcia;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.10.17.18.33.29;  author pgarcia;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*! \file thread.cc 
//  \brief Routines to manage threads.  
//
//   There are four main operations:
//	- Constructor : create an inactive thread
//      - Start : bind the thread to a process, and prepare it to be
//               dispatched on the CPU
//	- Finish : called when the forked procedure finishes, to clean up
//	- Yield : relinquish control over the CPU to another ready thread
//	- Sleep : relinquish control over the CPU, but thread is now blocked.
//		In other words, it will not run again, until explicitly 
//		put back on the ready queue.
*/
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"

#include "msgerror.h"
#include "thread.h"
#include "switch.h"
#include "synch.h"
#include "scheduler.h"
#include "interrupt.h"
#include "mmu.h"

#define UNSIGNED_LONG_AT_ADDR(addr) (*((unsigned long int*)(addr)))

/* Align on a boundary (MUST be a power of 2), so that return value <= val */
#define ALIGN_INF(val,boundary) \
  ((val) & (~((boundary)-1)))

/* Align on a boundary (MUST be a power of 2), so that return value >= val */
#define ALIGN_SUP(val,boundary) \
  ((((val)-1) & (~((boundary)-1))) + (boundary))

#define STACK_FENCEPOST 0xdeadbeef	// this is put at the end of the
					// kernel stack, for detecting 
					// stack overflows

// Forward reference
static void StartThreadExecution(Thread * theThread);

//----------------------------------------------------------------------
// Thread::Thread
/*! 	Constructor. Initialize an empty thread (just a name)
//
//	\param threadName is an arbitrary string, used for debugging.
*/
//----------------------------------------------------------------------
Thread::Thread(char *threadName)
{
  printf("*** Attention: constructeur de Thread non implemente\n");
  exit(-1);
}


//----------------------------------------------------------------------
// Thread::Start
/*!  Attach a thread to a process context (essentially an address
//   space), and prepare it to be dispatched on the CPU
//
// \return NoError on success, an error code on error
*/
//----------------------------------------------------------------------
int Thread::Start(Process *owner,
		  VoidFunctionPtr func, int arg)
{
  ASSERT(process == NULL);
  printf("*** Attention: Thread::Start non implementee\n");
  exit(-1);
}

//----------------------------------------------------------------------
// Thread::~Thread
/*! 	Destructor. De-allocate a thread.
//
// 	NOTE: the current thread *cannot* delete itself directly,
//	since it is still running on the stack that we need to delete.
//
//      When the last thread of a process has finished, its 
//      process can be deallocated.
*/
//----------------------------------------------------------------------

Thread::~Thread()
{
    DEBUG('t', "Deleting thread \"%s\"\n", name);
    ASSERT(this != currentThread);
    typeId = INVALID_TYPE_ID;

    ASSERT(kernelContext.stackBottom);
    CheckOverflow();
    DeallocBoundedArray((char *) kernelContext.stackBottom, 
			kernelContext.stackSize);

    // Protect from other accesses to the process object
    IntStatus oldLevel = interrupt->SetLevel(IntOff);    

    // Signals to the process that we terminated
    process->numThreads--;

    // If I'm the last thread of the process, delete it
    if (process->numThreads==0)
      {
	delete process;
      }

    interrupt->SetLevel(oldLevel);  

    delete [] name;
}

//----------------------------------------------------------------------
// Thread::InitUserContext
/*!	Set the initial values for the user-level register set
//          (userContext field)
//
//      \param initialPCREG initial value for the PC register
//      \param initialSP initial value for the SP register
//      \param arg argument to pass to the user thread
*/
//----------------------------------------------------------------------
void
Thread::InitUserContext(int initialPCREG,int initialSP, int arg)
{
    int i;

    for (i = 0; i < NumIntRegs; i++)
      userContext.intRegisters[i] = 0;

    // Initial program counter -- must be location of "Start"
    userContext.intRegisters[PCReg] = initialPCREG;

    // Need to also tell MIPS where next instruction is, because
    // of branch delay possibility
    userContext.intRegisters[NextPCReg] = initialPCREG+4;

    // Arguments
    userContext.intRegisters[4] = arg;
    
   // Set the stack register 
    userContext.intRegisters[StackReg] = initialSP;
}

//----------------------------------------------------------------------
// ThreadFinish, InterruptEnable, ThreadPrint
/*!	Dummy functions because C++ does not allow a pointer to a member
//	function.  So in order to do this, we create a dummy C function
//	(which we can pass a pointer to), that then simply calls the 
//	member function.
*/
//----------------------------------------------------------------------
static void ThreadFinish()    { currentThread->Finish(); }
static void InterruptEnable() { interrupt->Enable(); }
void ThreadPrint(int arg)
{ Thread *t = (Thread *)arg; printf("%s", t->GetName()); }

//----------------------------------------------------------------------
// Thread::InitKernelContext
/*! 	
//
//  Sets-up the thread kernel context : fills it with the appropriate
//  values such that the low-level context switch executes function
//  StartThreadExecution
// 	\param baseStackAddr is the lowest address of the kernel stack
//	
//----------------------------------------------------------------------
*/
void 
Thread::InitKernelContext(char* baseStackAddr,
			  unsigned long int stackSize)
{
  DEBUG('t', "Init kernel context \"%s\" with kernel stack=%p\n",
	name,  baseStackAddr);

  ASSERT(baseStackAddr != NULL);

  // Setup kernel stack parameters for low-level context switch
  kernelContext.stackBottom = (unsigned long int)baseStackAddr;
  kernelContext.stackSize   = stackSize;

  // Mark the bottom of the stack in order to detect stack overflows
  UNSIGNED_LONG_AT_ADDR(kernelContext.stackBottom) = STACK_FENCEPOST;
  
#ifdef HOST_SPARC
  // SPARC stack works from high addresses to low addresses

  // SPARC stack must contain at least 1 activation record to start with.
  // => Reserve enough space for it
  kernelContext.stackPointer
    = kernelContext.stackBottom + kernelContext.stackSize - 92;
  /* Why "stackTop - 92" ?
   * A SPARC stack frame contains:
   * - 64 Bytes (8 input regs + 8 output regs) for spilling register
   *   window
   * - 4 Bytes for the callee returning structs
   * - space for at least 6 args to callee => at least 24 Bytes
   * - space for local variables
   * ==> The SPARC minimum stack frame size is hence 64 + 4 + 24 + 0 = 92
   * Bytes. */

  /* Addtionnaly, The SPARC requires that the stack frames be aligned
   * on a double-word boundary (8 Bytes) */
  kernelContext.stackPointer = ALIGN_INF(kernelContext.stackPointer, 8);
#else
#ifdef HOST_i386
  // i386 stack works from high addresses to low addresses

  // the 80386 passes the return address on the stack.  In order for
  // SWITCH() to go to ThreadRoot when we switch to this thread, the
  // return addres used in SWITCH() must be the starting address of
  // ThreadRoot.

  /* Reserve enough space for the return address */
  kernelContext.stackPointer
    = kernelContext.stackBottom + kernelContext.stackSize - 4;

  /* Set the return address */
  UNSIGNED_LONG_AT_ADDR(kernelContext.stackPointer) = (unsigned)ThreadRoot;
#endif  /* HOST_i386 */
#endif  /* != HOST_SPARC */

  // Set up the kernel context such that the low-level context
  // switch jumps to function StartThreadExecution
  kernelContext.machineState[PCState]         = (int) ThreadRoot;
  kernelContext.machineState[StartupPCState]  = (int) InterruptEnable;
  kernelContext.machineState[InitialPCState]  = (int) StartThreadExecution;

  // 1st argument passed to StartThreadExecution:
  kernelContext.machineState[InitialArgState] = (int) this;

  kernelContext.machineState[WhenDonePCState] = (int) ThreadFinish;
} 

//----------------------------------------------------------------------
// Thread::Join
/*! 	
//      Sleep the thread until another thread finishes.
//	\param IdThread thread to wait for
//----------------------------------------------------------------------
*/
void 
Thread::Join(Thread *IdThread)
{ 
    while (alive->Search(IdThread)) Yield();
}
  
//----------------------------------------------------------------------
// Thread::CheckOverflow
/*! 	Check a thread's stack to see if it has overrun the space
//	that has been allocated for it.  If we had a smarter compiler,
//	we wouldn't need to worry about this, but we don't.
//
// 	NOTE: Nachos will not catch all stack overflow conditions.
//	In other words, your program may still crash because of an overflow.
//
// 	If you get bizarre results (such as seg faults where there is no code)
// 	then you *may* need to increase the stack size.  You can avoid stack
// 	overflows by not putting large data structures on the stack.
// 	Don't do this: void foo() { int bigArray[10000]; ... }
*/
//----------------------------------------------------------------------

void
Thread::CheckOverflow()
{
  ASSERT(UNSIGNED_LONG_AT_ADDR(kernelContext.stackBottom) == STACK_FENCEPOST);
}

//----------------------------------------------------------------------
// Thread::Finish
/*! 	Called by ThreadRoot when a thread is done executing the 
//	forked procedure.
//
// 	NOTE: we don't immediately de-allocate the thread data structure 
//	or the execution stack, because we're still running in the thread 
//	and we're still on the stack!  Instead, we set "threadToBeDestroyed", 
//	so that Scheduler::SwitchTo() will call the destructor, once we're
//	running in the context of a different thread.
//
// 	NOTE: we disable interrupts, so that we don't get a time slice 
//	between setting threadToBeDestroyed, and going to sleep.
*/
//----------------------------------------------------------------------
void
Thread::Finish ()
{
    void* temp;

    DEBUG('t', "Finishing thread \"%s\"\n", GetName());
 
    (void) interrupt->SetLevel(IntOff);
        
    // Remove from alive list
    while ((temp=alive->Remove()) != (void*)currentThread) {
      alive->Append(temp);
    }

    
    // Go to sleep
    Sleep();  // invokes SWITCH
}

//----------------------------------------------------------------------
// Thread::Yield
/*! 	Relinquish the CPU if any other thread is ready to run.
//	If so, put the thread on the end of the ready list, so that
//	it will eventually be re-scheduled.
//
//	NOTE: returns immediately if no other thread on the ready queue.
//	Otherwise returns when the thread eventually works its way
//	to the front of the ready list and gets re-scheduled.
//
//	NOTE: we disable interrupts, so that looking at the thread
//	on the front of the ready list, and switching to it, can be done
//	atomically.  On return, we re-set the interrupt level to its
//	original state, in case we are called with interrupts disabled. 
*/
//----------------------------------------------------------------------
void
Thread::Yield ()
{
    Thread *nextThread;
    IntStatus oldLevel = interrupt->SetLevel(IntOff);
    
    ASSERT(this == currentThread);
    
    DEBUG('s', "Yielding thread \"%s\"\n", GetName());
    
    nextThread = scheduler->FindNextToRun();
    if (nextThread != NULL) {
	scheduler->ReadyToRun(this);
	scheduler->SwitchTo(nextThread);
    }
    (void) interrupt->SetLevel(oldLevel);
}

//----------------------------------------------------------------------
// Thread::Sleep
/*! 	Relinquish the CPU, because the current thread is blocked
//	waiting on a synchronization variable (Semaphore, Lock, or Condition).
//	Eventually, some thread will wake this thread up, and put it
//	back on the ready queue, so that it can be re-scheduled.
//
//	NOTE: if there are no threads on the ready queue, that means
//	we have no thread to run.  "Interrupt::Idle" is called
//	to signify that we should idle the CPU until the next I/O interrupt
//	occurs (the only thing that could cause a thread to become
//	ready to run).
//
//	NOTE: we assume interrupts are already disabled, because it
//	is called from the synchronization routines which must
//	disable interrupts for atomicity.   We need interrupts off 
//	so that there can't be a time slice between pulling the first thread
//	off the ready list, and switching to it.
*/
//----------------------------------------------------------------------
void
Thread::Sleep ()
{
    Thread *nextThread;
    
    ASSERT(this == currentThread);
    ASSERT(interrupt->getLevel() == IntOff);
    
    DEBUG('s', "Sleeping thread \"%s\"\n", GetName());

    while ((nextThread = scheduler->FindNextToRun()) == NULL)
      {
	DEBUG('s', "Nobody to run => idle\n");
	interrupt->Idle();	// no one to run, wait for an interrupt
      }

    scheduler->SwitchTo(nextThread); // returns when we've been signalled
}

#include "machine.h"

//----------------------------------------------------------------------
// Thread::SaveUserState
/*!	Save the CPU state of a user program on a context switch
//         (userContext field)
//
//	Note that a user program thread has *two* sets of CPU registers -- 
//	one for its state while executing user code, one for its state 
//	while executing kernel code.  This routine saves the former.
*/
//----------------------------------------------------------------------
void
Thread::SaveUserState()
{
  printf("*** Attention: sauvegarde d'etat de Thread non implemente\n");
  exit(-1);
}

//----------------------------------------------------------------------
// Thread::RestoreUserState
/*!	Restore the CPU state of a user program on a context switch.
//         (userContext field)
//
//	Note that a user program thread has *two* sets of CPU registers -- 
//	one for its state while executing user code, one for its state 
//	while executing kernel code.  This routine restores the former.
*/
//----------------------------------------------------------------------

void
Thread::RestoreUserState()
{
  printf("*** Attention: restauration d'etat de Thread non implemente\n");
  exit(-1);
}

//----------------------------------------------------------------------
// StartThreadExecution
/*!  Called the first time a thread is started. At this time, the
 *   kernel context switch is already done, and the user state is
 *   already setup in the thread object, but not yet committed in the
 *   machine state.
 *
 *   \param thethread the thread to be started
*/
//----------------------------------------------------------------------
static void
StartThreadExecution(Thread * theThread)
{
  ASSERT(currentThread == theThread);

  // If the thread that released the CPU to us gave up the processor
  // because it was finishing, we need to delete its carcass.  Note we
  // cannot delete the thread before now (for example, in
  // Thread::Finish()), because up to this point, we were still
  // running on the old thread's stack!
  if (threadToBeDestroyed != NULL) {
    ASSERT(threadToBeDestroyed != currentThread);
    delete threadToBeDestroyed;
    threadToBeDestroyed = NULL;
  }

  // Set the current address space to that of the current thread
  theThread->GetProcessOwner()->addrSpace->RestoreState();
  
  // Commit the user context of the thread object to the machine, in
  // order to prepare for the user context switch
  theThread->RestoreUserState();

  // switch to the new user context jump to the user progam
  machine->Run();

  // machine->Run never returns; the address space exits by doing the
  // syscall "exit"
  ASSERT(false);
}
@


1.1.1.1
log
@creation nachos 2005
@
text
@@
