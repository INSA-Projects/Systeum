head     1.1;
branch   1.1.1;
access   ;
symbols  v0:1.1.1.1 Base:1.1.1;
locks    ; strict;
comment  @// @;


1.1
date     2005.10.17.18.33.31;  author pgarcia;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.10.17.18.33.31;  author pgarcia;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*! \file drvDisk.cc 
//  \brief Routines to synchronously access the disk
//
//      The physical disk 
//	is an asynchronous device (disk requests return immediately, and
//	an interrupt happens later on).  This is a layer on top of
//	the disk providing a synchronous interface (requests wait until
//	the request completes).
//
//	Use a semaphore to synchronize the interrupt handlers with the
//	pending requests.  And, because the physical disk can only
//	handle one operation at a time, use a lock to enforce mutual
//	exclusion.
*/
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "drvDisk.h"

//----------------------------------------------------------------------
// DiskRequestDone
/*! 	Disk interrupt handler.  Needd this to be a C routine, because 
//	C++ can't handle pointers to member functions.
*/
//----------------------------------------------------------------------

static void
DiskRequestDone (int arg)
{
    DriverDisk* disk = (DriverDisk *)arg;
    disk->RequestDone();
}

//----------------------------------------------------------------------
// DriverDisk::DriverDisk
/*! 	Constructor.
//      Initialize the disk driver, in turn
//	initializing the physical disk.
//
//	\param name  UNIX file name to be used as storage for the disk data
//	   (usually, "DISK")
*/
//----------------------------------------------------------------------

DriverDisk::DriverDisk(char* name)
{
    semaphore = new Semaphore("synch disk", 0);
    lock = new Lock("synch disk lock");
    disk = new Disk(name, DiskRequestDone, (int) this);
}

//----------------------------------------------------------------------
// DriverDisk::~DriverDisk
/*! 	Destructor.
//      De-allocate data structures needed for the disk driver.
*/
//----------------------------------------------------------------------

DriverDisk::~DriverDisk()
{
    delete disk;
    delete lock;
    delete semaphore;
}

//----------------------------------------------------------------------
// DriverDisk::ReadSector
/*! 	Read the contents of a disk sector into a buffer. Return only
//	after the data has been read.
//
//	\param sectorNumber the disk sector to read
//	\param data the buffer to hold the contents of the disk sector
*/
//----------------------------------------------------------------------

void
DriverDisk::ReadSector(int sectorNumber, char* data)
{
    DEBUG('h', "[sdisk] rd req\n");
    lock->Acquire();			// only one disk I/O at a time
    disk->ReadRequest(sectorNumber, data);
    DEBUG('h', "[sdisk] rd req: wait irq\n");
    semaphore->P();			// wait for interrupt
    lock->Release();
}

//----------------------------------------------------------------------
// DriverDisk::WriteSector
/*! 	Write the contents of a buffer into a disk sector.  Return only
//	after the data has been written.
//
//	\param sectorNumber  the disk sector to be written
//	\param data  the new contents of the disk sector
*/
//----------------------------------------------------------------------

void
DriverDisk::WriteSector(int sectorNumber, char* data)
{
    DEBUG('h', "[sdisk] wr req\n");
    lock->Acquire();			// only one disk I/O at a time
    disk->WriteRequest(sectorNumber, data);
    DEBUG('h', "[sdisk] wr req: wait irq...\n");
    semaphore->P();			// wait for interrupt
    DEBUG('h', "[sdisk] wr req: wait irq OK\n");
    lock->Release();
}

//----------------------------------------------------------------------
// DriverDisk::RequestDone
/*! 	Disk interrupt handler. Wake up any thread waiting for the disk
//	request to finish.
*/
//----------------------------------------------------------------------

void
DriverDisk::RequestDone()
{ 
  DEBUG('h', "[sdisk] req done\n");
    semaphore->V();
}
@


1.1.1.1
log
@creation nachos 2005
@
text
@@
