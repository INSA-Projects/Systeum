head     1.1;
branch   1.1.1;
access   ;
symbols  v0:1.1.1.1 Base:1.1.1;
locks    ; strict;
comment  @// @;


1.1
date     2005.10.17.18.33.32;  author pgarcia;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.10.17.18.33.32;  author pgarcia;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*! \file config.cc
    \brief Routines for setting up the Nachos hardware and software confuguration
//
//  Copyright (c) 1999-2000 INSA de Rennes.
//  All rights reserved.  
//  See copyright_insa.h for copyright notice and limitation 
//  of liability and disclaimer of warranty provisions.
*/
#ifndef CONFIG_CPP
#define CONFIG_CPP

#include <stdio.h>
#include "config.h"
#include "utility.h"
#include "disk.h"
#include "directory.h"
#include "system.h"

#define LINE_LENGTH     256
#define COMMAND_LENGTH  80

#define power_of_two(size) (((size) & ((size)-1)) == 0)

void
fail(int numligne,char *name,char *ligne)
{
  ligne[strlen(ligne)-1] = '\0';
  printf("Config Error : File %s line %d ---> \"%s\"\n",name,numligne,ligne);
  exit(-1);
}

Config::Config(char *configname) {

  // Default values for configuration parameters
  SectorSize=128;

  PageSize=128;
  NumPhysPages=20;
  MaxVirtPages=1024;
  TableType = SingleLevel;
  BookSize=5;
  TLBSize=5;

  ProcessorFrequency = 100;
  MaxFileNameSize=256;
  NbCopy=0;
  NumDirEntries=10;
  NumPortLoc=32009;
  NumPortDist=32009;

  TimeSharing=false;
  AddressDump=0;
  ExistTLB=true;
  PrintStat=false;
  FormatDisk=false;
  ListDir=false;
  PrintFileSyst=false;
  Print=false;
  Remove=false;
  MakeDir=false;
  RemoveDir=false;
  ACIA=false;
  strcpy(ProgramToRun,"");

#ifdef CACHELOCKING
  ICacheTraceDump=false;
  ICacheLineSize=16;    // Default value for cache line size
  ICacheNbLines=64;
  ICacheNbWays=1;       // Direct-mapped cache by default  
  ICacheOn=true;       // Cache and prefetch buffer by default
  ICacheLocked=false;
  ITHit = 1;
  ITMiss = 10;
  DCacheTraceDump=false;
  DCacheLineSize=16;    // Default value for cache line size
  DCacheNbLines=64;
  DCacheNbWays=1;       // Direct-mapped cache by default  
  DCacheOn=true;       // Cache and prefetch buffer by default
  DCacheLocked=false;
  DTHit = 1;
  DTMiss = 10;
  TimeModel = FETCH;
  PeriodicTaskSet = false;
  strcpy(UtilCpuFile,"CPU_utilization");
  UtilCpuMaxDelta = 0.0001;
#endif // CACHELOCKING

  int nblignes=0;
  DEBUG('c',"beginning the configuration\n");
  char ligne[LINE_LENGTH];
  char commande[COMMAND_LENGTH];
  
  cfg = fopen(configname,"r");

  if (cfg == (FILE *) NULL) {
    printf("Error: can't open file %s\n",configname);
    exit(-1);
  }
  
  while (!feof(cfg)) {
    
    fgets(ligne,LINE_LENGTH,cfg);
    nblignes++;
    if ((ligne[0] != '#')&&(strlen(ligne)!=0)) {

            // Accepted NULL lines
      if (strcmp(ligne,"") == 0) continue;
      if (strcmp(ligne,"\n") == 0) continue;

      if (sscanf(ligne," %s ",commande) != 1) fail(nblignes,configname,ligne);
      if (strlen(commande)!= 0) {
	
	if (strcmp(commande,"TLBSize") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&TLBSize)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"ProcessorFrequency") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&ProcessorFrequency)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}

	if (strcmp(commande,"NumPhysPages") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&NumPhysPages)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"MaxVirtPages") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&MaxVirtPages)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	if (strcmp(commande,"BookSize") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&BookSize)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	if (strcmp(commande,"SectorSize") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&SectorSize)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	if (strcmp(commande,"PageSize") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&PageSize)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	if (strcmp(commande,"MaxFileNameSize") == 0) {
	  if(sscanf(ligne," %s = %i ",commande,&MaxFileNameSize)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}

	if (strcmp(commande,"TableType") == 0) {
	  char buffer[20];
	  if(sscanf(ligne," %s = %s ",commande,buffer)==2)
	    {
	      if (strcmp(buffer,"DualLevel")==0)
		TableType=DualLevel;
	      else
		TableType=SingleLevel;
	    }
	  else fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"TimeSharing") == 0) {
	  int v;
	  if(sscanf(ligne," %s = %i ",commande,&v)==2)
	    {
	      if (v==0)
		TimeSharing = false;
	      else 
		TimeSharing = true;
	    }
	  else fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"AddressDump") == 0) {
	  int v;
	  if(sscanf(ligne," %s = %i ",commande,&v)==2)
	    AddressDump = (v);
	  else
	    fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"ExistTLB") == 0) {
	  int v;
	  if(sscanf(ligne," %s = %i ",commande,&v)==2)
	    {
	      ExistTLB=(bool)v;
	      if (v==0)
		ExistTLB = false;
	      else 
		ExistTLB = true;
	    }
	  else fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"TargetMachineName") == 0) {
	  if(sscanf(ligne," %s = %s ",commande,TargetMachineName)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"ProgramToRun") == 0) {
	  if(sscanf(ligne," %s = %s ",commande,ProgramToRun)!=2)
	    fail(nblignes,configname,ligne);
	  continue;
	}
	
	if (strcmp(commande,"PrintStat") == 0){
	  int v;
	  if(sscanf(ligne," %s = %i ",commande,&v)==2)
	    {
	      PrintStat=(bool)v;
	      if (v==0)
		PrintStat = false;
	      else 
		PrintStat = true;
	    }
	  else fail(nblignes,configname,ligne);
	  continue;
	}

	if (strcmp(commande,"FormatDisk") == 0){
	  int v;
	  if(sscanf(ligne," %s = %i ",commande,&v)==2)
	    {
	      if (v==0)
		FormatDisk = false;
	      else 
		FormatDisk = true;	 
	    }
	  else fail(nblignes,configname,ligne);
	  continue;
	}

      if (strcmp(commande,"ListDir") == 0){
	int v;
	  if(sscanf(ligne," %s = %i ",commande,&v)==2)
	    {
	      if (v==0)
		ListDir = false;
	      else 
		ListDir = true;
	    }
	  else fail(nblignes,configname,ligne);
	  continue;
      }
      
      if (strcmp(commande,"PrintFileSyst") == 0){
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  {
	    if (v==0)
	      PrintFileSyst = false;
	    else 
	      PrintFileSyst = true;
	  }
	  else fail(nblignes,configname,ligne);
	continue;
      }

      if (strcmp(commande,"FileToCopy") == 0){
	if(sscanf(ligne," %s = %s %s",commande,ToCopyUnix[NbCopy],ToCopyNachos[NbCopy])==3)
	  NbCopy++;
	else fail(nblignes,configname,ligne);
	continue;
      }
      
      if (strcmp(commande,"FileToPrint") == 0){
	if(sscanf(ligne," %s = %s ",commande,FileToPrint)==2)
	  Print=true;
       	else fail(nblignes,configname,ligne);
	continue;
      }
	
      if (strcmp(commande,"FileToRemove") == 0){	
	if(sscanf(ligne," %s = %s ",commande,FileToRemove)==2)
	  Remove=true;
	else fail(nblignes,configname,ligne);	
	continue;
      }

      if (strcmp(commande,"DirToMake") == 0){
	  if(sscanf(ligne," %s = %s ",commande,DirToMake)==2)
	    MakeDir=true;
	  else fail(nblignes,configname,ligne);
	  continue;
      }
      
      if (strcmp(commande,"DirToRemove") == 0){

	if(sscanf(ligne," %s = %s ",commande,DirToRemove)==2)
	  RemoveDir=true;
	else fail(nblignes,configname,ligne);
	continue;
      }

      if (strcmp(commande,"NumDirEntries") == 0){
	if(sscanf(ligne," %s = %i ",commande,&NumDirEntries)!=2)
	  fail(nblignes,configname,ligne);
	continue;
      }
	
      if (strcmp(commande,"UseACIA") == 0){
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  {
	    if (v==0)
	      ACIA = false;
	    else 
	      ACIA = true;
	  }	
	else fail(nblignes,configname,ligne);
	continue;
      }
      
      if (strcmp(commande,"NumPortLoc") == 0){
	if(sscanf(ligne," %s = %i ",commande,&NumPortLoc)!=2)
	  fail(nblignes,configname,ligne);
	continue;
      }
      
      if (strcmp(commande,"NumPortDist") == 0){
	if(sscanf(ligne," %s = %i ",commande,&NumPortDist)!=2)
	  fail(nblignes,configname,ligne);
	continue;
      }

#ifdef CACHELOCKING
      if (strcmp(commande,"ICacheTraceDump") == 0) {
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  ICacheTraceDump = (v!=0);
	else
	  fail(nblignes,configname,ligne);
	continue;
      }
      if (strcmp(commande,"DCacheTraceDump") == 0) {
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  DCacheTraceDump = (v!=0);
	else
	  fail(nblignes,configname,ligne);
	continue;
      }

      if (strcmp(commande,"ICacheLineSize") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&ICacheLineSize)!=2)
	  fail(nblignes,configname,ligne);	
	continue;
      }
      if (strcmp(commande,"DCacheLineSize") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&DCacheLineSize)!=2)
	  fail(nblignes,configname,ligne);	
	continue;
      }
      if (strcmp(commande,"ICacheNbLines") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&ICacheNbLines)!=2)
	  fail(nblignes,configname,ligne);
      	continue;
      }
      if (strcmp(commande,"DCacheNbLines") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&DCacheNbLines)!=2)
	  fail(nblignes,configname,ligne);
      	continue;
      }

      if (strcmp(commande,"ICacheNbWays") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&ICacheNbWays)!=2)
	  fail(nblignes,configname,ligne);
	continue;
      }
      if (strcmp(commande,"DCacheNbWays") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&DCacheNbWays)!=2)
	  fail(nblignes,configname,ligne);
	continue;
      }
      if (strcmp(commande,"UtilCpuMaxDelta") == 0) {
	if(sscanf(ligne," %s = %f ",commande,&UtilCpuMaxDelta)!=2)
	  fail(nblignes,configname,ligne);
	continue;
      }

      if (strcmp(commande,"ICache") == 0) {
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  {
	    if (v==0)
	      ICacheOn = false;
	    else 
	      ICacheOn = true;
	  }
	else fail(nblignes,configname,ligne);
	continue;
      }
      if (strcmp(commande,"DCache") == 0) {
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  {
	    if (v==0)
	      DCacheOn = false;
	    else 
	      DCacheOn = true;
	  }
	else fail(nblignes,configname,ligne);
	continue;
      }
      if (strcmp(commande,"PeriodicTaskSet") == 0) {
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  {
	    if (v==0)
	      PeriodicTaskSet = false;
	    else 
	      PeriodicTaskSet = true;
	  }
	else fail(nblignes,configname,ligne);
	continue;
      }
      if (strcmp(commande,"ICacheLocked") == 0) {
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  {
	    if (v==0)
	      ICacheLocked = false;
	    else 
	      ICacheLocked = true;
	  }
	else fail(nblignes,configname,ligne);
	continue;
      }      
      if (strcmp(commande,"DCacheLocked") == 0) {
	int v;
	if(sscanf(ligne," %s = %i ",commande,&v)==2)
	  {
	    if (v==0)
	      DCacheLocked = false;
	    else 
	      DCacheLocked = true;
	  }
	else fail(nblignes,configname,ligne);
	continue;
      }     
      if (strcmp(commande,"ITHit") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&ITHit)!=2)
	  fail(nblignes,configname,ligne);	
	continue;

      }
      if (strcmp(commande,"ITMiss") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&ITMiss)!=2)
	  fail(nblignes,configname,ligne);	
	continue;

      }
      if (strcmp(commande,"DTHit") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&DTHit)!=2)
	  fail(nblignes,configname,ligne);	
	continue;

      }
      if (strcmp(commande,"DTMiss") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&DTMiss)!=2)
	  fail(nblignes,configname,ligne);	
	continue;

      }
      if (strcmp(commande,"TimeModel") == 0) {
	if(sscanf(ligne," %s = %i ",commande,&TimeModel)!=2)
	  fail(nblignes,configname,ligne);	
	continue;

      }
      if (strcmp(commande,"UtilCpuFile") == 0){
	if(sscanf(ligne," %s = %s ",commande,UtilCpuFile)!=2)
	  fail(nblignes,configname,ligne);
	continue;
      }
      
#endif // CACHELOCKING

      // Autres variables -> non reconnues
      fail(nblignes,configname,commande);
	
      }
      strcpy(commande,"\0");
      
    }
  }

  fclose(cfg);

  if (PageSize != SectorSize) {
    printf("Warning, PageSize<>SectorSize, setting both to %d\n",SectorSize);
    PageSize   = SectorSize;
  }

  // Check that sector size and page sizes are powers of two
  if (!power_of_two(SectorSize)) {
    printf("Configuration error : SectorSize should be a power of two, exiting\n");
    exit(-1);
  }

  NumDirect = ((SectorSize - 4 * sizeof(int)) / sizeof(int));
  //MaxFileSize = (NumDirect * SectorSize);
  MagicNumber = 0x456789ab;
  MagicSize = sizeof(int);
  DiskSize = (MagicSize + (NUM_SECTORS * SectorSize));
  DirectoryFileSize=(sizeof(DirectoryEntry) * NumDirEntries);
  DEBUG('c',"End of configuration\n");
}
  
Config::~Config() {
}

#endif // CONFIG_CPP
@


1.1.1.1
log
@creation nachos 2005
@
text
@@
