head	1.2;
access;
symbols
	v0:1.1.1.1 Base:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2006.01.04.16.17.16;	author pgarcia;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.17.18.33.32;	author pgarcia;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.10.17.18.33.32;	author pgarcia;	state Exp;
branches;
next	;


desc
@@


1.2
log
@file system multi thread
@
text
@/*! \file filesys.h 
    \brief Data structures to represent the Nachos file system.
  
  	A file system is a set of files stored on disk, organized
  	into directories.  Operations on the file system have to
  	do with "naming" -- creating, opening, and deleting files,
  	given a textual file name.  Operations on an individual
  	"open" file (read, write, close) are to be found in the OpenFile
  	class (openfile.h).
  
  	There are two key data
  	structures used in the file system.  There is a single "root"
  	directory, listing all of the files in the file system; unlike
  	UNIX, the baseline system does not provide a hierarchical
  	directory structure.  In addition, there is a bitmap for
  	allocating disk sectors.  Both the root directory and the
  	bitmap are themselves stored as files in the Nachos file
  	system -- this causes an interesting bootstrap problem when
  	the simulated disk is initialized.
  
    Copyright (c) 1992-1993 The Regents of the University of California.
    All rights reserved.  See copyright.h for copyright notice and limitation 
    of liability and disclaimer of warranty provisions.
*/


#ifndef FS_H
#define FS_H

/*! Initial file sizes for the bitmap and directory; until the file system
// supports extensible files, the directory size sets the maximum number 
// of files that can be loaded onto the disk.
*/
#define FreeMapFileSize 	(NUM_SECTORS / BITS_IN_BYTE)

#include "copyright.h"
#include "openfile.h"

int FindDir(char *);
/*! \brief Defines the Nachos file system
 */
class FileSystem {
public:
  FileSystem(bool format); //!< Initialize the file system.
			   //!< Must be called *after* "synchDisk" 
			   //!< has been initialized.
					
  int Create(char *name, int initialSize); //!< Create a file (UNIX creat)

  OpenFile* Open(char *name); //!< Open a file (UNIX open)

  void Close(OpenFile*); //!< Is called when a thread close a file

  int Remove(char *name); //!< Delete a file (UNIX unlink)

  void List(); //!< List all the files in the file system

  void Print();	//!< List all the files and their contents
  
  OpenFile *GetFreeMapFile(); //!< Get the free map table
    
  OpenFile *GetDirFile(); //!< Get the root directory

  int Mkdir(char *); //!< Create a new directory
    
  int Rmdir(char *); //!< Delete a directory

private:
  OpenFile* freeMapFile; /*!< Bit map of free disk blocks,
			   represented as a file
			 */
  OpenFile* directoryFile; /*!< "Root" directory -- list of 
			     file names, represented as a file
			   */
};

#endif // FS_H
@


1.1
log
@Initial revision
@
text
@d43 4
a46 4
  public:
    FileSystem(bool format);		//!< Initialize the file system.
					//!< Must be called *after* "synchDisk" 
					//!< has been initialized.
d48 1
a48 2
    int Create(char *name, int initialSize);  	
					//!< Create a file (UNIX creat)
d50 1
a50 1
    OpenFile* Open(char *name); 	//!< Open a file (UNIX open)
d52 1
a52 1
    int Remove(char *name);  		//!< Delete a file (UNIX unlink)
d54 1
a54 1
    void List();			//!< List all the files in the file system
d56 3
a58 1
    void Print();			//!< List all the files and their contents
d60 1
a60 1
    OpenFile *GetFreeMapFile();         //!< Get the free map table
d62 1
a62 1
    OpenFile *GetDirFile();             //!< Get the root directory
d64 1
a64 1
    int Mkdir(char *);                  //!< Create a new directory
d66 1
a66 2
    int Rmdir(char *);                  //!< Delete a directory

d68 7
a74 7
  private:
   OpenFile* freeMapFile;		/*!< Bit map of free disk blocks,
					 represented as a file
					*/
   OpenFile* directoryFile;		/*!< "Root" directory -- list of 
					 file names, represented as a file
					 */
@


1.1.1.1
log
@creation nachos 2005
@
text
@@
