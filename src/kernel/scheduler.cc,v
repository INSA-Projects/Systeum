head     1.1;
branch   1.1.1;
access   ;
symbols  v0:1.1.1.1 Base:1.1.1;
locks    ; strict;
comment  @// @;


1.1
date     2005.10.17.18.33.29;  author pgarcia;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.10.17.18.33.29;  author pgarcia;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*! \file scheduler.cc 
//  \brief Routines to choose the next thread to run, and to dispatch to that thread.
//
// 	These routines assume that interrupts are already disabled.
//	If interrupts are disabled, we can assume mutual exclusion
//	(since we are on a uniprocessor).
//
// 	NOTE: We can't use Locks to provide mutual exclusion here, since
// 	if we needed to wait for a lock, and the lock was busy, we would 
//	end up calling FindNextToRun(), and that would put us in an 
//	infinite loop.
//
// 	Very simple implementation -- no priorities, straight FIFO.
*/
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.


#include "copyright.h"
#include "scheduler.h"
#include "system.h"

#include "tlb.h"
#include "switch.h"

//----------------------------------------------------------------------
//  Scheduler::Scheduler
/*! 	Constructor. Initialize the list of ready but not 
//      running threads to empty.
*/
//----------------------------------------------------------------------
Scheduler::Scheduler()
{ 
    readyList = new Listint; 
} 

//----------------------------------------------------------------------
// Scheduler::~Scheduler
/*! 	Destructor. De-allocate the list of ready threads.
*/
//----------------------------------------------------------------------
Scheduler::~Scheduler()
{ 
    delete readyList; 
} 

//----------------------------------------------------------------------
// Scheduler::ReadyToRun
/*! 	Mark a thread as ready, but not running.
//	Put it on the ready list, for later scheduling onto the CPU.
//
//	\param thread is the thread to be put on the ready list.
*/
//----------------------------------------------------------------------
void
Scheduler::ReadyToRun (Thread *thread)
{
    DEBUG('s', "Putting thread %s on ready list.\n", thread->GetName());
    readyList->Append((void *)thread);
}

//----------------------------------------------------------------------
// Scheduler::FindNextToRun
/*! 	Return the next thread to be scheduled onto the CPU.
//	If there are no ready threads, return NULL.
// Side effect:
//	Thread is removed from the ready list.
// \return Thread to be scheduled on the CPU
*/
//----------------------------------------------------------------------
Thread *
Scheduler::FindNextToRun ()
{
  Thread * thread=(Thread*)readyList->Remove();
  return thread;
}

//----------------------------------------------------------------------
// Scheduler::SwitchTo
/*! 	Dispatch the CPU to nextThread.  Save the state of the old thread,
//	and load the state of the new thread, by calling the machine
//	dependent context switch routine, SWITCH.
//
//      Note: we assume the state of the previously running thread has
//	already been changed from running to blocked or ready (depending).
// Side effect:
//	The global variable currentThread becomes nextThread.
//
//	\param nextThread is the thread to be put into the CPU.
*/
//----------------------------------------------------------------------
void
Scheduler::SwitchTo (Thread *nextThread)
{
Thread *oldThread = currentThread;
    DEBUG('s', "Switching from thread \"%s\" to thread \"%s\" time %llu\n",
	  oldThread->GetName(), nextThread->GetName(),stats->getTotalTicks());
    
 
    currentThread = nextThread;		    // switch to the next thread

    // This is a machine-dependent assembly language routine defined 
    // in switch.s.  You may have to think
    // a bit to figure out what happens after this, both from the point
    // of view of the thread and from the perspective of the "outside world".

    SWITCH(oldThread->GetKernelContext(),
	   nextThread->GetKernelContext());
    
    DEBUG('s', "Now in thread \"%s\" time %llu\n", currentThread->GetName(),stats->getTotalTicks());

}

//----------------------------------------------------------------------
// Scheduler::Print
/*! 	Print the scheduler state -- in other words, the contents of
//	the ready list.  For debugging.
*/
//----------------------------------------------------------------------
void
Scheduler::Print()
{
    printf("Ready list contents: [");
    readyList->Mapcar((VoidFunctionPtr) ThreadPrint);
    printf("]\n");
}
@


1.1.1.1
log
@creation nachos 2005
@
text
@@
