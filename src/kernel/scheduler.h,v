head     1.1;
branch   1.1.1;
access   ;
symbols  v0:1.1.1.1 Base:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2005.10.17.18.33.29;  author pgarcia;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.10.17.18.33.29;  author pgarcia;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@//-----------------------------------------------------------------------
/*! \file scheduler.h
    \brief Defines the Nachos scheduler
  
   The class defines the scheduler/dispatcher abstraction -- 
   the data structures and operations needed to keep track of which 
   thread is running, and which threads are ready but not running.

   Copyright (c) 1992-1993 The Regents of the University of California.
   All rights reserved.  See copyright.h for copyright notice and limitation 
   of liability and disclaimer of warranty provisions.
  
*/
//-----------------------------------------------------------------------

#ifndef SCHEDULER_H
#define SCHEDULER_H

#include "copyright.h"
#include "list.h"

class Thread;

class Scheduler {
public:
  
  //! Constructor. Initialize list of ready threads.  
  Scheduler();
   
  //! Destructor. De-allocate the ready list. 
  virtual ~Scheduler();
    			
  //! Inserts a thread in the ready list
  virtual void ReadyToRun(Thread* thread);
    
  //! Dequeue first thread of the ready list, if any, and return thread. 
  virtual Thread* FindNextToRun();
    		
  //! Cause context switch to nextThread
  void SwitchTo(Thread* nextThread);
    
  //! Print contents of ready list.  
  void Print();

protected:  
  //! Queue of threads that are ready to run,but not running.
  Listint *readyList;
};

#endif // SCHEDULER_H
@


1.1.1.1
log
@creation nachos 2005
@
text
@@
