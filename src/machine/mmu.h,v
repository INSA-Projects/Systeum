head     1.1;
branch   1.1.1;
access   ;
symbols  v0:1.1.1.1 Base:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2005.10.17.18.33.31;  author pgarcia;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.10.17.18.33.31;  author pgarcia;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*! \file mmu.h
   \brief Data structures for the MMU (Memory Management Unit)

    DO NOT CHANGE -- part of the machine emulation
  
    Copyright (c) 1999-2000 INSA de Rennes.
    All rights reserved.  
    See copyright_insa.h for copyright notice and limitation 
    of liability and disclaimer of warranty provisions.
*/


#ifndef MMU_H
#define MMU_H

class MMU;

#include "machine.h" //ExceptionType
#include "translationtable.h"

/*! \brief Defines a MMU - Memory Management Unit
*/
// This object manages the memory of the simulated MIPS processor for
// the Nachos kernel.
class MMU {
public:
  MMU();
  
  ~MMU();
  
  bool ReadMem(int addr, int size, int* value, bool is_instruction,
	       int *fetch_time);
                                //!< Read or write 1, 2, or 4 bytes of virtual 
				//!< memory (at addr).  Return FALSE if a 

  bool WriteMem(int addr, int size, int value, int *write_time);
    				//!< Write or write 1, 2, or 4 bytes of virtual 
				//!< memory (at addr).  Return FALSE if a 
				//!< correct translation couldn't be found.
  
  ExceptionType Translate(int virtAddr, int* physAddr,
			  int size, bool writing);
    				//!< Translate an address, and check for 
				//!< alignment. Set the use and dirty bits in 
				//!< the translation entry appropriately,
    				//!< and return an exception code if the 
				//!< translation couldn't be completed.
  
  // NOTE: the hardware translation of virtual addresses in the user program
  // to physical addresses (relative to the beginning of "mainMemory")
  // can be controlled by both :
  //	- a traditional linear page table (or dual level page table)
  //  	- a software-loaded translation lookaside buffer (tlb) -- a cache of 
  //	  mappings of virtual page #'s to physical page #'s
  TranslationTable *translationTable; //!< Pointer to the translation table
};

#endif // MMU_H
@


1.1.1.1
log
@creation nachos 2005
@
text
@@
