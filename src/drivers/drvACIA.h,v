head     1.1;
branch   1.1.1;
access   ;
symbols  v0:1.1.1.1 Base:1.1.1;
locks    ; strict;
comment  @ * @;


1.1
date     2005.10.17.18.33.31;  author pgarcia;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.10.17.18.33.31;  author pgarcia;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/*! \file drvACIA.h
  \brief Data structures for the ACIA device driver
   interrupt_send and interrupt_receive are used in the intrrupt mode only.
  
        The ACIA is an asynchronous device (requests return 
        immediately, and an interrupt happens later on).  
        This is a layer on top of the ACIA.
        Two working modes are to be implemented in assignment 2:
        a Busy Waiting mode and an Interrupt mode. The Busy Waiting
        mode implements a synchronous IO whereas IOs are asynchronous
        IOs are implemented in the Interrupt mode (see the Nachos
        roadmap for further details).
  
    Copyright (c) 1999-2000 INSA de Rennes.
    All rights reserved.  
    See copyright_insa.h for copyright notice and limitation 
    of liability and disclaimer of warranty provisions.
*/

#ifndef _ACIA_HDL
#define _ACIA_HDL

/* Includes */

#include"synch.h"	// for the acces to the synchronisation's tools

#define BUFFER_SIZE 256  // size of emission and reception buffers

/*! The class DriverACIA defines the handler of the ACIA. It is the
system's interface between the user programs and the ACIA (simulated) hardware.*/

/*! \brief Defines an ACIA (Asynchronous Communication Interface Adapter) device driver */
class DriverACIA{

 private:
  char sendBuffer[BUFFER_SIZE];        //!< system buffer for emission
  char receiveBuffer[BUFFER_SIZE];     //!< system buffer for reception
  Semaphore* emissionFinished;  //!< semaphore used to synchronize emission requests.
  Semaphore* receptionFinished; //!< semaphore used to synchronize reception requests.
  
  int indSend; //!< index in the emission buffer
  int indRec;  //!< index in the reception buffer
    
 public:
  //! Constructor. Driver initialization.
  DriverACIA();
  
  //! Send a message through the ACIA
  int TtySend(char* buff);
  
  //! Receive a message using the ACIA 
  int TtyReceive(char* buff,int lg);
  
  //! Emission interrupt handler. Used in the ACIA Interrupt mode only
  void InterruptSend();
  
  //! Reception interrupt handler. Used in the ACIA Interrupt mode only
  void InterruptReceive();
};
#endif // _ACIA_HDL

@


1.1.1.1
log
@creation nachos 2005
@
text
@@
